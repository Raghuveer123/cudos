AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - 
        Label:
          default: "Common Parameters Configuration"
        Parameters:
          - DevDestinationAccountId
          - PrdDestinationAccountId
          - ResourcePrefix
          - CreateCUR
      - 
        Label:
          default: "Destination Account specific parameters (fill only on Destination Account)"
        Parameters:
          - SourceAccountIds

    ParameterLabels:
      DevDestinationAccountId:
        default: "Dev Destination Account Id"
      PrdDestinationAccountId:
        default: "Prd Destination Account Id"
      ResourcePrefix:
        default: "Prefix used for all named resources, including S3 Bucket"
      SourceAccountIds:
        default: "Source Account Ids"
Parameters:

  ##
  # Common params
  ##
  DevDestinationAccountId:
    Type: String
    Description: "AWS Account Id where CID Quicksight Dashboard will be deployed"
    AllowedPattern: '\d{12}'
  PrdDestinationAccountId:
    Type: String
    Description: "AWS Account Id where CID Quicksight Dashboard will be deployed"
  ResourcePrefix:
    Type: String
    Default: "cid"
    Description: "Resource prefix. Will be used as a prefix for bucket and a name of a CUR"
    AllowedPattern: "^[a-z0-9]+[a-z0-9-]{1,61}[a-z0-9]+$"
  CreateCUR:
    Type: String
    Description: Whether to create a local CUR in the destination account or not. Set this to False only if the current account is covered in the CUR of its Management (Payer) Account.
    AllowedValues:
      - "True"
      - "False"
    Default: "True"
  ##
  # Destination specific params
  ##

  SourceAccountIds:
    Type: String
    AllowedPattern: "^[0-9,]*$"
    Default: ''
    Description: "A comma separated list of all Source accounts that will replicate CUR Data. Ex:  12345678912,98745612312,...."

Conditions:
  IsDevDestinationAccount: !Equals [!Ref DevDestinationAccountId, !Ref AWS::AccountId]
  IsPrdDestinationAccount: !Equals [!Ref PrdDestinationAccountId, !Ref AWS::AccountId]
  IsNorthVirginia: !Equals [!Ref AWS::Region, 'us-east-1']

Resources:

###########################################################################
# Destination Account Resources
###########################################################################

####
# S3 Bucket which store all CUR from Accounts
####

  DevDestinationS3:
    Type: AWS::S3::Bucket
    Condition: IsDevDestinationAccount
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName:
        Fn::Sub: "${ResourcePrefix}-${AWS::AccountId}-shared"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: Object&Version Expiration
            Status: Enabled
            NoncurrentVersionExpirationInDays: 32 # 1 month 

  DevDestinationS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Condition: IsDevDestinationAccount
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      Bucket:
        Ref: DevDestinationS3
      PolicyDocument:
        Id: CrossAccessPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: AllowTLS12Only
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${DevDestinationS3}'
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${DevDestinationS3}/*'
            Condition:
              NumericLessThan:
                s3:TlsVersion: 1.2
          - Sid: AllowOnlyHTTPS
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${DevDestinationS3}'
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${DevDestinationS3}/*'
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: AllowReadBilling
            Effect: Allow
            Principal:
              Service: billingreports.amazonaws.com
            Action:
              - s3:GetBucketAcl
              - s3:GetBucketPolicy
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${DevDestinationS3}'
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${DevDestinationS3}/*'
          - Sid: AllowWriteBilling
            Effect: Allow
            Principal:
              Service: billingreports.amazonaws.com
            Action:
              - s3:PutObject
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${DevDestinationS3}/*'
          - Sid: AllowReplicationWrite
            Effect: Allow
            Principal:
              AWS:
                Fn::If:
                  - EmptySourceAccountIds
                  - !Ref AWS::AccountId
                  - !Split [',', !Ref SourceAccountIds]
            Action:
              - s3:ReplicateDelete
              - s3:ReplicateObject
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${DevDestinationS3}/*'
          - Sid: AllowReplicationRead
            Effect: Allow
            Principal:
              AWS:
                Fn::If:
                  - EmptySourceAccountIds
                  - !Ref AWS::AccountId
                  - !Split [',', !Ref SourceAccountIds]
            Action:
              - s3:List*
              - s3:GetBucketVersioning
              - s3:PutBucketVersioning
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${DevDestinationS3}'
  
  PrdDestinationS3:
    Type: AWS::S3::Bucket
    Condition: IsPrdDestinationAccount
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName:
        Fn::Sub: "${ResourcePrefix}-${AWS::AccountId}-shared"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: Object&Version Expiration
            Status: Enabled
            NoncurrentVersionExpirationInDays: 32 # 1 month 

  PrdDestinationS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Condition: IsDevDestinationAccount
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      Bucket:
        Ref: DevDestinationS3
      PolicyDocument:
        Id: CrossAccessPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: AllowTLS12Only
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${PrdDestinationS3}'
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${PrdDestinationS3}/*'
            Condition:
              NumericLessThan:
                s3:TlsVersion: 1.2
          - Sid: AllowOnlyHTTPS
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${PrdDestinationS3}'
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${PrdDestinationS3}/*'
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: AllowReadBilling
            Effect: Allow
            Principal:
              Service: billingreports.amazonaws.com
            Action:
              - s3:GetBucketAcl
              - s3:GetBucketPolicy
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${PrdDestinationS3}'
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${PrdDestinationS3}/*'
          - Sid: AllowWriteBilling
            Effect: Allow
            Principal:
              Service: billingreports.amazonaws.com
            Action:
              - s3:PutObject
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${PrdDestinationS3}/*'
          - Sid: AllowReplicationWrite
            Effect: Allow
            Principal:
              AWS:
                Fn::If:
                  - EmptySourceAccountIds
                  - !Ref AWS::AccountId
                  - !Split [',', !Ref SourceAccountIds]
            Action:
              - s3:ReplicateDelete
              - s3:ReplicateObject
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${PrdDestinationS3}/*'
          - Sid: AllowReplicationRead
            Effect: Allow
            Principal:
              AWS:
                Fn::If:
                  - EmptySourceAccountIds
                  - !Ref AWS::AccountId
                  - !Split [',', !Ref SourceAccountIds]
            Action:
              - s3:List*
              - s3:GetBucketVersioning
              - s3:PutBucketVersioning
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${PrdDestinationS3}'


###########################################################################
# Source Account Resources
###########################################################################

####
# S3 Bucket with replication 
####

  DevSourceS3:
    Type: AWS::S3::Bucket
    Condition: IsDevSourceAccount
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BucketName:
        Fn::Sub: ${ResourcePrefix}-${AWS::AccountId}-local
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      ReplicationConfiguration:
        Role: !GetAtt DevCrossRegionReplicationRole.Arn
        Rules:
          -
            Destination:
              Bucket:
                Fn::Sub: "arn:${AWS::Partition}:s3:::${ResourcePrefix}-${DevDestinationAccountId}-shared"
              StorageClass: STANDARD
            Id: ReplicationRule1
            Prefix: ""
            Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: Object&Version Expiration
            Status: Enabled
            NoncurrentVersionExpirationInDays: 32 # 1 month
            ExpirationInDays: 64 # 2 months

  DevSourceS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Condition: IsDevSourceAccount
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Bucket: !Ref SourceS3
      PolicyDocument:
        Id: CrossAccessPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: AllowTLS12Only
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${DevSourceS3}'
              - !Sub 'arn:${AWS::Partition}:s3:::${DevSourceS3}/*'
            Condition:
              NumericLessThan:
                s3:TlsVersion: 1.2
          - Sid: AllowOnlyHTTPS
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${DevSourceS3}'
              - !Sub 'arn:${AWS::Partition}:s3:::${DevSourceS3}/*'
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: AllowReadBilling
            Effect: Allow
            Principal:
              Service: billingreports.amazonaws.com
            Action:
              - s3:GetBucketAcl
              - s3:GetBucketPolicy
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${DevSourceS3}'
              - !Sub 'arn:${AWS::Partition}:s3:::${DevSourceS3}/*'
          - Sid: AllowWriteBilling
            Effect: Allow
            Principal:
              Service: billingreports.amazonaws.com
            Action:
              - s3:PutObject
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${DevSourceS3}/*'

  DevCrossRegionReplicationRole:
    Condition: IsDevSourceAccount
    Type: AWS::IAM::Role
    Properties:
      Path:
        Fn::Sub: /${ResourcePrefix}/
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "s3.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: CrossRegionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetReplicationConfiguration
                  - s3:ListBucket
                Resource: !Sub "arn:${AWS::Partition}:s3:::${ResourcePrefix}-${AWS::AccountId}-local"
              - Effect: Allow
                Action:
                  - s3:GetObjectVersionForReplication
                  - s3:GetObjectVersionAcl
                Resource: !Sub "arn:${AWS::Partition}:s3:::${ResourcePrefix}-${AWS::AccountId}-local/*"
              - Effect: Allow
                Action:
                  - s3:ReplicateObject
                  - s3:ReplicateDelete
                  - s3:ReplicateTags
                  - s3:GetObjectVersionTagging
                Resource:
                  Fn::Sub: "arn:${AWS::Partition}:s3:::${ResourcePrefix}-${DevDestinationAccountId}-shared/cur/${AWS::AccountId}/*"
  PrdSourceS3:
    Type: AWS::S3::Bucket
    Condition: IsPrdSourceAccount
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BucketName:
        Fn::Sub: ${ResourcePrefix}-${AWS::AccountId}-local
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      ReplicationConfiguration:
        Role: !GetAtt PrdCrossRegionReplicationRole.Arn
        Rules:
          -
            Destination:
              Bucket:
                Fn::Sub: "arn:${AWS::Partition}:s3:::${ResourcePrefix}-${PrdDestinationAccountId}-shared"
              StorageClass: STANDARD
            Id: ReplicationRule1
            Prefix: ""
            Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: Object&Version Expiration
            Status: Enabled
            NoncurrentVersionExpirationInDays: 32 # 1 month
            ExpirationInDays: 64 # 2 months

  PrdSourceS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Condition: IsPrdSourceAccount
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Bucket: !Ref SourceS3
      PolicyDocument:
        Id: CrossAccessPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: AllowTLS12Only
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${PrdSourceS3}'
              - !Sub 'arn:${AWS::Partition}:s3:::${PrdSourceS3}/*'
            Condition:
              NumericLessThan:
                s3:TlsVersion: 1.2
          - Sid: AllowOnlyHTTPS
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${PrdSourceS3}'
              - !Sub 'arn:${AWS::Partition}:s3:::${PrdSourceS3}/*'
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: AllowReadBilling
            Effect: Allow
            Principal:
              Service: billingreports.amazonaws.com
            Action:
              - s3:GetBucketAcl
              - s3:GetBucketPolicy
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${PrdSourceS3}'
              - !Sub 'arn:${AWS::Partition}:s3:::${PrdSourceS3}/*'
          - Sid: AllowWriteBilling
            Effect: Allow
            Principal:
              Service: billingreports.amazonaws.com
            Action:
              - s3:PutObject
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${PrdSourceS3}/*'

  DevCrossRegionReplicationRole:
    Condition: IsPrdSourceAccount
    Type: AWS::IAM::Role
    Properties:
      Path:
        Fn::Sub: /${ResourcePrefix}/
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "s3.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: CrossRegionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetReplicationConfiguration
                  - s3:ListBucket
                Resource: !Sub "arn:${AWS::Partition}:s3:::${ResourcePrefix}-${AWS::AccountId}-local"
              - Effect: Allow
                Action:
                  - s3:GetObjectVersionForReplication
                  - s3:GetObjectVersionAcl
                Resource: !Sub "arn:${AWS::Partition}:s3:::${ResourcePrefix}-${AWS::AccountId}-local/*"
              - Effect: Allow
                Action:
                  - s3:ReplicateObject
                  - s3:ReplicateDelete
                  - s3:ReplicateTags
                  - s3:GetObjectVersionTagging
                Resource:
                  Fn::Sub: "arn:${AWS::Partition}:s3:::${ResourcePrefix}-${PrdDestinationAccountId}-shared/cur/${AWS::AccountId}/*"
###########################################################################
# Analytics: used by CID team to track adoption, by retrieving AWS AccountId
###########################################################################

  CIDLambdaAnalyticsRole: #Execution role for the custom resource CIDLambdaAnalyticsExecutor
    Type: AWS::IAM::Role
    Properties:
      Path:
        Fn::Sub: /${ResourcePrefix}/
      #RoleName: CID-Analytics
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "ExecutionDefault"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:CreateLogGroup
              Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourcePrefix}-CID-Analytics"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourcePrefix}-CID-Analytics:*"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourcePrefix}-CID-Analytics:*:*"

  CIDLambdaAnalytics:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      FunctionName:
        Fn::Sub: ${ResourcePrefix}-CID-Analytics
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt: CIDLambdaAnalyticsRole.Arn
      Timeout: 15
      Environment:
        Variables:
          API_ENDPOINT: https://okakvoavfg.execute-api.eu-west-1.amazonaws.com/
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import cfnresponse
          import urllib3
          import uuid

          http = urllib3.PoolManager()
          endpoint=os.environ["API_ENDPOINT"]
          account_id=boto3.client("sts").get_caller_identity()["Account"]

          def execute_request(action,dashboard_id,via_key):
              try:
                  message=None
                  payload={'dashboard_id': dashboard_id, 'account_id': account_id, via_key: 'CFN'}
                  encoded_data = json.dumps(payload).encode('utf-8')
                  r = http.request(action,endpoint,body=encoded_data,headers={'Content-Type': 'application/json'})
                  if r.status!=200:
                      message=f"This will not fail the deployment. There has been an issue logging action {action}  for dashboard {dashboard_id} and account {account_id}, server did not respond with a 200 response,actual  status: {r.status}, response data {r.data.decode('utf-8')}. This issue will be ignored"
              except urllib3.exceptions.HTTPError as e:
                message=f"Issue logging action {action}  for dashboard {dashboard_id} and account {account_id}, due to a urllib3 exception {str(e)} . This issue will be ignored"
              return message


          def register_deployment(action,dashboards):
              message=f"Succesfully logged  {action} for {dashboards}"
              for dashboard_id in dashboards:
                  if action == 'CREATE':
                      message=execute_request('PUT',dashboard_id,'created_via')
                  elif action == 'UPDATE':
                      message=execute_request('PATCH',dashboard_id,'updated_via')
                  elif action == 'DELETE':
                      message=execute_request('DELETE',dashboard_id,'deleted_via')
                  if message is None:
                      message=f"Succesfully logged  {action} for {dashboards} "
              #Do not stop deployment if we're not able to succesfully record this deployment, still return true
              return ("True",message)


          def lambda_handler(event, context):
              if event['RequestType'] == 'Create':
                  res, reason = register_deployment('CREATE',event['ResourceProperties']['DeploymentType'])
              elif event['RequestType'] == 'Update':
                  res, reason = register_deployment('UPDATE',event['ResourceProperties']['DeploymentType'])
              elif event['RequestType'] == 'Delete':
                  res, reason = register_deployment('DELETE',event['ResourceProperties']['DeploymentType'])
              else:
                  res = False
                  reason = "Unknown operation: " + event['RequestType']

              response_data = {'Reason': reason}
              print(response_data)
              if 'PhysicalResourceId' in event.keys() and event['PhysicalResourceId'] is not None:
                  physicalResourceId=event['PhysicalResourceId']
              else:
                  physicalResourceId=str(uuid.uuid1())
              if res:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physicalResourceId )
              else:
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data, physicalResourceId )

  DevCIDLambdaAnalyticsExecutor:
    Type: Custom::CIDLambdaAnalyticsExecutor
    Properties:
      ServiceToken: !GetAtt CIDLambdaAnalytics.Arn
      DeploymentType:
        - Fn::If:
          - IsDevDestinationAccount
          - "cid-cur-aggregator"
          - "cid-cur-replication"
  
  PrdCIDLambdaAnalyticsExecutor:
    Type: Custom::CIDLambdaAnalyticsExecutor
    Properties:
      ServiceToken: !GetAtt CIDLambdaAnalytics.Arn
      DeploymentType:
        - Fn::If:
          - IsPrdDestinationAccount
          - "cid-cur-aggregator"
          - "cid-cur-replication"
Outputs:
  GovernanceBucketName:
    Description: Bucket where to store and aggregate CUR
    Value:
      Fn::Sub: ${ResourcePrefix}-${DestinationAccountId}-shared
